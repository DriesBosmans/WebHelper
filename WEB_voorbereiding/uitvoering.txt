

update-database

Nuget packages
Identity.EntityFrameworkCore
EntityframeworkCore.SqlServer
EntityFrameworkCore.Tools

Models toevoegen => Gebruiker, Student, Lector, Admin, CustomIdentityUser, Vak, VakLector
Datafolder: ApplicationDbContext.cs, SeedData.cs
appsettings.json => Connectionstring
startup.cs	ConfigureServices =>	AppDbContext
									use connectionstring
									AddIdentity
									AddPasswordValidator
CustomPasswordValidator toevoegen (tools folder)

startup.cs => use Authentication
		   => SeedData.EnsurePopulated

add-migration initial
update-database

SeedData invullen
{
	contextdata,
	roles,
	identityrecords
}
Roles.cs => lijst van Roles (optioneel)

add-migration initiatedata
update-database

REGISTER & LOGIN
registerviewmodel: Alle properties waar we velden voor willen.
loginviewmodel: alle properties waar we velden voor willen (email en pass)
RegisterResult: Het resultaat van de registratie, hier kunnen fouten worden teruggegeven
en of de registratie al dan niet mislukt is. Optioneel, maar aangewezen
AccountController: kan grotendeels gekopieerd worden
We hebben een RegisterActie, een LoginActie, LogoutActie en Accessdenied

RegisterView scaffolden=> rechtsclick op actie register => Add View
Template = Create
Model = RegisterViewModel
Geen data context

LoginView scaffolden =>
Template = Create
Model = LoginViewModel
geen data context

AccessDenied view => empty Razor view


PARTIAL VIEW
_NavbarPartial
Sharedfolder > add Razor view > empty > create as a partial view
We hebben signinmanager, usermanager en rolemanager nodig hier
Dit is een navbar dat navigatie toont op basis van de rol van de ingelogde gebruiker
Kan gemakkelijk overgenomen worden
moet geimplementeerd worden in _Layout navbar

TAGHELPERS
folder TagHelpers > Add TagHelper class > GebruikersInfoTagHelper
_ViewImports.cshtml > "@addTagHelper *, WebHelper" toevoegen - belangrijk
GebruikersInfoTagHelper.cs => Simpele taghelper die wat html voorziet
ChangeTextColorTageHelper.cs => custom attribuut, wat in dit geval een klasse toewijst


GEBRUIKERSCONTROLLER aanmaken

VIEWCOMPONENT
GebruikersFilterViewComponent
We maken twee componenten aan onder de volgende folders: 
	rootfolder/ViewComponents/GebruikersFilterViewComponent.cs
	rootfolder/Views/Shared/Components/GebruikersFilter/Default.cshtml
Naamgeving van folders en bestanden is belangrijk. Het bestand in sharedfolder
is altijd Default.cshtml

GebruikersFilterComponent.cs
- erft over van ViewComponent
- Heeft een IViewComponentResult Invoke() functie, waar we een lijst van functies doorgeven aan de View

Default.cshtml
Voor elk van deze functies maken we een link

Moet geimplementeerd worden in een pagina (Gebruikers/Index.cshtml) als <vc:gebruikers-filter/>

GEBRUIKERSCONTROLLER
index => aanpassen zodat de view de gebruikerslist krijgt van de repo
Edit => [Authorize(Roles = Roles.Admin)]


